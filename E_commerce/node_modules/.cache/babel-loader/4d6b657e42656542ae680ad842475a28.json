{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    products: [],\n    quantity: 0,\n    total: 0\n  },\n  reducers: {\n    addProduct: (state, action) => {\n      state.quantity += 1;\n      const indexOfExistingProduct = state.products.findIndex(product => product._id === action.payload._id);\n      console.log(indexOfExistingProduct);\n\n      if (indexOfExistingProduct >= 0) {\n        state.products[indexOfExistingProduct].quantity = +action.payload.quantity;\n        console.log(state.products[indexOfExistingProduct].quantity);\n      }\n\n      state.products.push(action.payload);\n      state.total += action.payload.price * action.payload.quantity;\n    },\n    removeProduct: (state, action) => {\n      // state.quantity -= 1;\n      // Find object(product) in array by its id,\n      const idx = action.payload;\n      state.total -= state.products[idx].price * state.products[idx].quantity;\n      console.log(state.total);\n      state.products.splice(idx, 1);\n      state.quantity -= 1; // then find the price of the product and the quantity and mulitply together\n      // then take away from cart total(state.total). \n      // state.total -= targetProduct.price * targetProduct.quantity;\n      // Then filter the array to remove the desired product.\n      // state.products.splice(targetProductIndex, 1);\n    }\n  }\n});\nexport const {\n  addProduct,\n  removeProduct\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/dan/Coding/E-commerce/src/redux/cartRedux.js"],"names":["createSlice","cartSlice","name","initialState","products","quantity","total","reducers","addProduct","state","action","indexOfExistingProduct","findIndex","product","_id","payload","console","log","push","price","removeProduct","idx","splice","actions","reducer"],"mappings":"AAAA,SAASA,WAAT,QAA4B,kBAA5B;AAEA,MAAMC,SAAS,GAAGD,WAAW,CAAC;AAC1BE,EAAAA,IAAI,EAAE,MADoB;AAE1BC,EAAAA,YAAY,EAAE;AACVC,IAAAA,QAAQ,EAAE,EADA;AAEVC,IAAAA,QAAQ,EAAE,CAFA;AAGVC,IAAAA,KAAK,EAAE;AAHG,GAFY;AAO1BC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UAAU,EAAC,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAC1BD,MAAAA,KAAK,CAACJ,QAAN,IAAkB,CAAlB;AACA,YAAMM,sBAAsB,GAAGF,KAAK,CAACL,QAAN,CAAeQ,SAAf,CAAyBC,OAAO,IAAIA,OAAO,CAACC,GAAR,KAAgBJ,MAAM,CAACK,OAAP,CAAeD,GAAnE,CAA/B;AACAE,MAAAA,OAAO,CAACC,GAAR,CAAYN,sBAAZ;;AACA,UAAGA,sBAAsB,IAAI,CAA7B,EAAgC;AAC5BF,QAAAA,KAAK,CAACL,QAAN,CAAeO,sBAAf,EAAuCN,QAAvC,GAAiD,CAAEK,MAAM,CAACK,OAAP,CAAeV,QAAlE;AACAW,QAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACL,QAAN,CAAeO,sBAAf,EAAuCN,QAAnD;AACH;;AACDI,MAAAA,KAAK,CAACL,QAAN,CAAec,IAAf,CAAoBR,MAAM,CAACK,OAA3B;AACAN,MAAAA,KAAK,CAACH,KAAN,IAAeI,MAAM,CAACK,OAAP,CAAeI,KAAf,GAAuBT,MAAM,CAACK,OAAP,CAAeV,QAArD;AACH,KAXK;AAYNe,IAAAA,aAAa,EAAC,CAACX,KAAD,EAAQC,MAAR,KAAmB;AAC7B;AACA;AACA,YAAMW,GAAG,GAAGX,MAAM,CAACK,OAAnB;AAEAN,MAAAA,KAAK,CAACH,KAAN,IAAgBG,KAAK,CAACL,QAAN,CAAeiB,GAAf,EAAoBF,KAApB,GAA4BV,KAAK,CAACL,QAAN,CAAeiB,GAAf,EAAoBhB,QAAhE;AACAW,MAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACH,KAAlB;AACAG,MAAAA,KAAK,CAACL,QAAN,CAAekB,MAAf,CAAsBD,GAAtB,EAA2B,CAA3B;AACAZ,MAAAA,KAAK,CAACJ,QAAN,IAAkB,CAAlB,CAR6B,CAU7B;AACA;AACA;AACA;AACA;AACH;AA3BK;AAPgB,CAAD,CAA7B;AAsCA,OAAO,MAAM;AAAEG,EAAAA,UAAF;AAAcY,EAAAA;AAAd,IAAgCnB,SAAS,CAACsB,OAAhD;AACP,eAAetB,SAAS,CAACuB,OAAzB","sourcesContent":["import { createSlice } from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n    name: \"cart\",\n    initialState: {\n        products: [],\n        quantity: 0,\n        total: 0,\n    },\n    reducers: {\n        addProduct:(state, action) => {\n            state.quantity += 1;\n            const indexOfExistingProduct = state.products.findIndex(product => product._id === action.payload._id);\n            console.log(indexOfExistingProduct);\n            if(indexOfExistingProduct >= 0) {\n                state.products[indexOfExistingProduct].quantity =+ action.payload.quantity;\n                console.log(state.products[indexOfExistingProduct].quantity);\n            }\n            state.products.push(action.payload);\n            state.total += action.payload.price * action.payload.quantity;\n        },\n        removeProduct:(state, action) => {\n            // state.quantity -= 1;\n            // Find object(product) in array by its id,\n            const idx = action.payload;\n            \n            state.total -= (state.products[idx].price * state.products[idx].quantity);\n            console.log(state.total);\n            state.products.splice(idx, 1);\n            state.quantity -= 1;\n            \n            // then find the price of the product and the quantity and mulitply together\n            // then take away from cart total(state.total). \n            // state.total -= targetProduct.price * targetProduct.quantity;\n            // Then filter the array to remove the desired product.\n            // state.products.splice(targetProductIndex, 1);\n        },\n    },\n});\n\nexport const { addProduct, removeProduct } = cartSlice.actions;\nexport default cartSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}