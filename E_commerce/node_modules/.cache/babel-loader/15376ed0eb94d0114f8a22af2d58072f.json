{"ast":null,"code":"import { useDispatch as dispatch } from \"react-redux\";\nimport { publicRequest } from \"../requestMethods\";\nimport { loginFailure, loginStart, loginSuccess, registerStart, registerSuccess, registerFailure } from \"./userSlice\";\nimport { newCartStart, newCartSuccess, newCartFailure } from \"./cartRedux.js\";\nexport const login = async (dispatch, user) => {\n  dispatch(loginStart());\n\n  try {\n    const res = await publicRequest.post(\"auth/login\", user);\n    dispatch(loginSuccess(res.data));\n  } catch (err) {\n    dispatch(loginFailure());\n  }\n};\nexport const register = async (dispatch, user) => {\n  dispatch(registerStart());\n\n  try {\n    const res = await publicRequest.post(\"auth/register\", user);\n    dispatch(registerSuccess(res.data));\n  } catch (err) {\n    dispatch(registerFailure());\n  }\n};\nexport const newCart = async (dispatch, cart) => {\n  dispatch(newCartStart());\n\n  try {\n    const res = await publicRequest.post(\"carts/\", {\n      userId: \"\",\n      products: [{\n        productId: {\n          type: String\n        },\n        quantity: {\n          type: Number,\n          default: 1\n        }\n      }]\n    });\n    dispatch(newCartSuccess(res.data));\n  } catch (err) {\n    dispatch(newCartFailure());\n  }\n};","map":{"version":3,"sources":["/Users/dan/Coding/E-commerce/src/redux/apiCalls.js"],"names":["useDispatch","dispatch","publicRequest","loginFailure","loginStart","loginSuccess","registerStart","registerSuccess","registerFailure","newCartStart","newCartSuccess","newCartFailure","login","user","res","post","data","err","register","newCart","cart","userId","products","productId","type","String","quantity","Number","default"],"mappings":"AAAA,SACIA,WAAW,IAAIC,QADnB,QAEO,aAFP;AAGA,SACIC,aADJ,QAEO,mBAFP;AAGA,SACIC,YADJ,EAEIC,UAFJ,EAGIC,YAHJ,EAIIC,aAJJ,EAKIC,eALJ,EAMIC,eANJ,QAOO,aAPP;AAQA,SACIC,YADJ,EAEIC,cAFJ,EAGIC,cAHJ,QAIO,gBAJP;AAOA,OAAO,MAAMC,KAAK,GAAG,OAAOX,QAAP,EAAiBY,IAAjB,KAA0B;AAC3CZ,EAAAA,QAAQ,CAACG,UAAU,EAAX,CAAR;;AACA,MAAI;AACA,UAAMU,GAAG,GAAG,MAAMZ,aAAa,CAACa,IAAd,CAAmB,YAAnB,EAAiCF,IAAjC,CAAlB;AACAZ,IAAAA,QAAQ,CAACI,YAAY,CAACS,GAAG,CAACE,IAAL,CAAb,CAAR;AACH,GAHD,CAGE,OAAOC,GAAP,EAAY;AACVhB,IAAAA,QAAQ,CAACE,YAAY,EAAb,CAAR;AACH;AACJ,CARM;AAUP,OAAO,MAAMe,QAAQ,GAAG,OAAOjB,QAAP,EAAiBY,IAAjB,KAA0B;AAC9CZ,EAAAA,QAAQ,CAACK,aAAa,EAAd,CAAR;;AACA,MAAI;AACA,UAAMQ,GAAG,GAAG,MAAMZ,aAAa,CAACa,IAAd,CAAmB,eAAnB,EAAoCF,IAApC,CAAlB;AACAZ,IAAAA,QAAQ,CAACM,eAAe,CAACO,GAAG,CAACE,IAAL,CAAhB,CAAR;AACH,GAHD,CAGE,OAAOC,GAAP,EAAY;AACVhB,IAAAA,QAAQ,CAACO,eAAe,EAAhB,CAAR;AACH;AACJ,CARM;AAUP,OAAO,MAAMW,OAAO,GAAG,OAAOlB,QAAP,EAAiBmB,IAAjB,KAA0B;AAC7CnB,EAAAA,QAAQ,CAACQ,YAAY,EAAb,CAAR;;AACA,MAAI;AACA,UAAMK,GAAG,GAAG,MAAMZ,aAAa,CAACa,IAAd,CAAmB,QAAnB,EAA8B;AAC5CM,MAAAA,MAAM,EAAE,EADoC;AAE5CC,MAAAA,QAAQ,EAAE,CACN;AACIC,QAAAA,SAAS,EAAE;AACPC,UAAAA,IAAI,EAACC;AADE,SADf;AAIIC,QAAAA,QAAQ,EAAE;AACNF,UAAAA,IAAI,EAACG,MADC;AAENC,UAAAA,OAAO,EAAE;AAFH;AAJd,OADM;AAFkC,KAA9B,CAAlB;AAcA3B,IAAAA,QAAQ,CAACS,cAAc,CAACI,GAAG,CAACE,IAAL,CAAf,CAAR;AACH,GAhBD,CAgBE,OAAOC,GAAP,EAAY;AACVhB,IAAAA,QAAQ,CAACU,cAAc,EAAf,CAAR;AACH;AACJ,CArBM","sourcesContent":["import {\n    useDispatch as dispatch\n} from \"react-redux\";\nimport {\n    publicRequest\n} from \"../requestMethods\";\nimport {\n    loginFailure,\n    loginStart,\n    loginSuccess,\n    registerStart,\n    registerSuccess,\n    registerFailure\n} from \"./userSlice\";\nimport {\n    newCartStart,\n    newCartSuccess,\n    newCartFailure\n} from \"./cartRedux.js\";\n\n\nexport const login = async (dispatch, user) => {\n    dispatch(loginStart());\n    try {\n        const res = await publicRequest.post(\"auth/login\", user);\n        dispatch(loginSuccess(res.data));\n    } catch (err) {\n        dispatch(loginFailure());\n    }\n};\n\nexport const register = async (dispatch, user) => {\n    dispatch(registerStart());\n    try {\n        const res = await publicRequest.post(\"auth/register\", user);\n        dispatch(registerSuccess(res.data));\n    } catch (err) {\n        dispatch(registerFailure());\n    }\n};\n\nexport const newCart = async (dispatch, cart) => {\n    dispatch(newCartStart());\n    try {\n        const res = await publicRequest.post(\"carts/\",  {\n            userId: \"\",\n            products: [\n                {\n                    productId: { \n                        type:String \n                    }, \n                    quantity: {\n                        type:Number,\n                        default: 1,\n                    },\n                },\n            ],\n        });\n        dispatch(newCartSuccess(res.data));\n    } catch (err) {\n        dispatch(newCartFailure());\n    }\n}"]},"metadata":{},"sourceType":"module"}