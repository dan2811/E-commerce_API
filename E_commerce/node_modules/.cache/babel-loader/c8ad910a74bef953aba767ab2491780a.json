{"ast":null,"code":"import{createSlice}from\"@reduxjs/toolkit\";var cartSlice=createSlice({name:\"cart\",initialState:{products:[],quantity:0,total:0},reducers:{addProduct:function addProduct(state,action){state.quantity+=action.payload.quantity;state.total+=action.payload.price*action.payload.quantity;var indexOfExistingProduct=state.products.findIndex(function(product){return product._id===action.payload._id;});console.log(action.payload.color);if(indexOfExistingProduct>=0&&action.payload.color===state.products[indexOfExistingProduct].color&&action.payload.size===state.products[indexOfExistingProduct].size){state.products[indexOfExistingProduct].quantity+=action.payload.quantity;console.log(state.products[indexOfExistingProduct].quantity);return;}state.products.push(action.payload);},removeProduct:function removeProduct(state,action){var idx=action.payload;state.total-=state.products[idx].price*state.products[idx].quantity;state.quantity-=state.products[idx].quantity;state.products.splice(idx,1);},incrementQuantity:function incrementQuantity(state,action){state.products[action.payload].quantity+=1;state.quantity+=1;state.total+=parseInt(state.products[action.payload].price);},decrementQuantity:function decrementQuantity(state,action){var currentProduct=state.products[action.payload];currentProduct.quantity-=1;state.quantity-=1;state.total-=parseInt(currentProduct.price);},newCartStart:function newCartStart(state,action){console.log(\"new cart started\");},newCartSuccess:function newCartSuccess(state,action){state.cart=action.payload;console.log(\"new cart success\");},newCartFailure:function newCartFailure(state,action){console.log(\"new cart fail\");console.log(action.payload);}}});var _cartSlice$actions=cartSlice.actions,addProduct=_cartSlice$actions.addProduct,removeProduct=_cartSlice$actions.removeProduct,incrementQuantity=_cartSlice$actions.incrementQuantity,decrementQuantity=_cartSlice$actions.decrementQuantity,newCartStart=_cartSlice$actions.newCartStart,newCartSuccess=_cartSlice$actions.newCartSuccess,newCartFailure=_cartSlice$actions.newCartFailure;export{addProduct,removeProduct,incrementQuantity,decrementQuantity,newCartStart,newCartSuccess,newCartFailure};export default cartSlice.reducer;","map":{"version":3,"sources":["/Users/dan/Coding/E-commerce_API/E_commerce/src/redux/cartRedux.js"],"names":["createSlice","cartSlice","name","initialState","products","quantity","total","reducers","addProduct","state","action","payload","price","indexOfExistingProduct","findIndex","product","_id","console","log","color","size","push","removeProduct","idx","splice","incrementQuantity","parseInt","decrementQuantity","currentProduct","newCartStart","newCartSuccess","cart","newCartFailure","actions","reducer"],"mappings":"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","sourcesContent":["import {\n    createSlice\n} from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n    name: \"cart\",\n    initialState: {\n        products: [],\n        quantity: 0,\n        total: 0,\n    },\n    reducers: {\n        addProduct: (state, action) => {\n            state.quantity += action.payload.quantity;\n            state.total += action.payload.price * action.payload.quantity;\n            const indexOfExistingProduct = state.products.findIndex(product => product._id === action.payload._id);\n            console.log(action.payload.color);\n            if (\n                indexOfExistingProduct >= 0 &&\n                action.payload.color === state.products[indexOfExistingProduct].color &&\n                action.payload.size === state.products[indexOfExistingProduct].size\n            ) {\n                state.products[indexOfExistingProduct].quantity += action.payload.quantity;\n                console.log(state.products[indexOfExistingProduct].quantity);\n                return;\n            }\n            state.products.push(action.payload);\n        },\n        removeProduct: (state, action) => {\n            const idx = action.payload;\n            state.total -= (state.products[idx].price * state.products[idx].quantity);\n            state.quantity -= state.products[idx].quantity;\n            state.products.splice(idx, 1);\n        },\n        incrementQuantity: (state, action) => {\n            state.products[action.payload].quantity += 1;\n            state.quantity += 1;\n            state.total += parseInt(state.products[action.payload].price);\n        },\n        decrementQuantity: (state, action) => {\n            const currentProduct = state.products[action.payload];\n            currentProduct.quantity -= 1;\n            state.quantity -= 1;\n            state.total -= parseInt(currentProduct.price);\n        },\n        newCartStart: (state, action) => {\n            console.log(\"new cart started\");\n        },\n        newCartSuccess: (state, action) => {\n            state.cart = action.payload;\n            console.log(\"new cart success\");\n        },\n        newCartFailure: (state, action) => {\n            console.log(\"new cart fail\");\n            console.log(action.payload);\n        },\n    },\n});\n\nexport const {\n    addProduct,\n    removeProduct,\n    incrementQuantity,\n    decrementQuantity,\n    newCartStart,\n    newCartSuccess,\n    newCartFailure\n} = cartSlice.actions;\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}