{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nconst cartSlice = createSlice({\n  name: \"cart\",\n  initialState: {\n    products: [],\n    quantity: 0,\n    total: 0\n  },\n  reducers: {\n    addProduct: (state, action) => {\n      state.quantity += action.payload.quantity;\n      state.total += action.payload.price * action.payload.quantity;\n      const indexOfExistingProduct = state.products.findIndex(product => product._id === action.payload._id);\n      console.log(action.payload.color);\n\n      if (indexOfExistingProduct >= 0 && action.payload.color === state.products[indexOfExistingProduct].color && action.payload.size === state.products[indexOfExistingProduct].size) {\n        state.products[indexOfExistingProduct].quantity += action.payload.quantity;\n        console.log(state.products[indexOfExistingProduct].quantity);\n        return;\n      }\n\n      state.products.push(action.payload);\n    },\n    removeProduct: (state, action) => {\n      const idx = action.payload;\n      state.total -= state.products[idx].price * state.products[idx].quantity;\n      state.quantity -= state.products[idx].quantity;\n      state.products.splice(idx, 1);\n    },\n    incrementQuantity: (state, action) => {\n      state.products[action.payload].quantity += 1;\n      state.quantity += 1;\n      state.total += parseInt(state.products[action.payload].price);\n    },\n    decrementQuantity: (state, action) => {\n      const currentProduct = state.products[action.payload];\n      currentProduct.quantity -= 1;\n      state.quantity -= 1;\n      state.total -= parseInt(currentProduct.price);\n    },\n    newCartStart: (state, action) => {\n      console.log(\"new cart started\");\n    }\n  }\n});\nexport const {\n  addProduct,\n  removeProduct,\n  incrementQuantity,\n  decrementQuantity\n} = cartSlice.actions;\nexport default cartSlice.reducer;","map":{"version":3,"sources":["/Users/dan/Coding/E-commerce/src/redux/cartRedux.js"],"names":["createSlice","cartSlice","name","initialState","products","quantity","total","reducers","addProduct","state","action","payload","price","indexOfExistingProduct","findIndex","product","_id","console","log","color","size","push","removeProduct","idx","splice","incrementQuantity","parseInt","decrementQuantity","currentProduct","newCartStart","actions","reducer"],"mappings":"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","sourcesContent":["import {\n    createSlice\n} from \"@reduxjs/toolkit\";\n\nconst cartSlice = createSlice({\n    name: \"cart\",\n    initialState: {\n        products: [],\n        quantity: 0,\n        total: 0,\n    },\n    reducers: {\n        addProduct: (state, action) => {\n            state.quantity += action.payload.quantity;\n            state.total += action.payload.price * action.payload.quantity;\n            const indexOfExistingProduct = state.products.findIndex(product => product._id === action.payload._id);\n            console.log(action.payload.color);\n            if (\n                indexOfExistingProduct >= 0 &&\n                action.payload.color === state.products[indexOfExistingProduct].color &&\n                action.payload.size === state.products[indexOfExistingProduct].size\n            ) {\n                state.products[indexOfExistingProduct].quantity += action.payload.quantity;\n                console.log(state.products[indexOfExistingProduct].quantity);\n                return;\n            }\n            state.products.push(action.payload);\n        },\n        removeProduct: (state, action) => {\n            const idx = action.payload;\n            state.total -= (state.products[idx].price * state.products[idx].quantity);\n            state.quantity -= state.products[idx].quantity;\n            state.products.splice(idx, 1);\n        },\n        incrementQuantity: (state, action) => {\n            state.products[action.payload].quantity += 1;\n            state.quantity += 1;\n            state.total += parseInt(state.products[action.payload].price);\n        },\n        decrementQuantity: (state, action) => {\n            const currentProduct = state.products[action.payload];\n            currentProduct.quantity -= 1;\n            state.quantity -= 1;\n            state.total -= parseInt(currentProduct.price);\n        },\n        newCartStart: (state, action) => {\n            console.log(\"new cart started\");\n        },\n        \n    },\n});\n\nexport const {\n    addProduct,\n    removeProduct,\n    incrementQuantity,\n    decrementQuantity\n} = cartSlice.actions;\nexport default cartSlice.reducer;"]},"metadata":{},"sourceType":"module"}